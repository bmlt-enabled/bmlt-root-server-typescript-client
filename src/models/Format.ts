/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FormatTranslation } from './FormatTranslation';
import {
    FormatTranslationFromJSON,
    FormatTranslationFromJSONTyped,
    FormatTranslationToJSON,
} from './FormatTranslation';

/**
 * 
 * @export
 * @interface Format
 */
export interface Format {
    /**
     * 
     * @type {string}
     * @memberof Format
     */
    worldId: string;
    /**
     * 
     * @type {string}
     * @memberof Format
     */
    type: string;
    /**
     * 
     * @type {Array<FormatTranslation>}
     * @memberof Format
     */
    translations: Array<FormatTranslation>;
    /**
     * 
     * @type {number}
     * @memberof Format
     */
    id: number;
}

/**
 * Check if a given object implements the Format interface.
 */
export function instanceOfFormat(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "worldId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "translations" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function FormatFromJSON(json: any): Format {
    return FormatFromJSONTyped(json, false);
}

export function FormatFromJSONTyped(json: any, ignoreDiscriminator: boolean): Format {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'worldId': json['worldId'],
        'type': json['type'],
        'translations': ((json['translations'] as Array<any>).map(FormatTranslationFromJSON)),
        'id': json['id'],
    };
}

export function FormatToJSON(value?: Format | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'worldId': value.worldId,
        'type': value.type,
        'translations': ((value.translations as Array<any>).map(FormatTranslationToJSON)),
        'id': value.id,
    };
}

