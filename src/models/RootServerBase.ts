/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RootServerBaseStatistics } from './RootServerBaseStatistics';
import {
    RootServerBaseStatisticsFromJSON,
    RootServerBaseStatisticsFromJSONTyped,
    RootServerBaseStatisticsToJSON,
} from './RootServerBaseStatistics';

/**
 * 
 * @export
 * @interface RootServerBase
 */
export interface RootServerBase {
    /**
     * 
     * @type {number}
     * @memberof RootServerBase
     */
    sourceId?: number;
    /**
     * 
     * @type {string}
     * @memberof RootServerBase
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RootServerBase
     */
    url?: string;
    /**
     * 
     * @type {RootServerBaseStatistics}
     * @memberof RootServerBase
     */
    statistics?: RootServerBaseStatistics;
    /**
     * 
     * @type {string}
     * @memberof RootServerBase
     */
    serverInfo?: string;
    /**
     * 
     * @type {Date}
     * @memberof RootServerBase
     */
    lastSuccessfulImport?: Date;
}

/**
 * Check if a given object implements the RootServerBase interface.
 */
export function instanceOfRootServerBase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RootServerBaseFromJSON(json: any): RootServerBase {
    return RootServerBaseFromJSONTyped(json, false);
}

export function RootServerBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RootServerBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceId': !exists(json, 'sourceId') ? undefined : json['sourceId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'statistics': !exists(json, 'statistics') ? undefined : RootServerBaseStatisticsFromJSON(json['statistics']),
        'serverInfo': !exists(json, 'serverInfo') ? undefined : json['serverInfo'],
        'lastSuccessfulImport': !exists(json, 'lastSuccessfulImport') ? undefined : (new Date(json['lastSuccessfulImport'])),
    };
}

export function RootServerBaseToJSON(value?: RootServerBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceId': value.sourceId,
        'name': value.name,
        'url': value.url,
        'statistics': RootServerBaseStatisticsToJSON(value.statistics),
        'serverInfo': value.serverInfo,
        'lastSuccessfulImport': value.lastSuccessfulImport === undefined ? undefined : (value.lastSuccessfulImport.toISOString()),
    };
}

