/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RootServerBaseStatisticsMeetings } from './RootServerBaseStatisticsMeetings';
import {
    RootServerBaseStatisticsMeetingsFromJSON,
    RootServerBaseStatisticsMeetingsFromJSONTyped,
    RootServerBaseStatisticsMeetingsToJSON,
} from './RootServerBaseStatisticsMeetings';
import type { RootServerBaseStatisticsServiceBodies } from './RootServerBaseStatisticsServiceBodies';
import {
    RootServerBaseStatisticsServiceBodiesFromJSON,
    RootServerBaseStatisticsServiceBodiesFromJSONTyped,
    RootServerBaseStatisticsServiceBodiesToJSON,
} from './RootServerBaseStatisticsServiceBodies';

/**
 * 
 * @export
 * @interface RootServerBaseStatistics
 */
export interface RootServerBaseStatistics {
    /**
     * 
     * @type {RootServerBaseStatisticsServiceBodies}
     * @memberof RootServerBaseStatistics
     */
    serviceBodies: RootServerBaseStatisticsServiceBodies;
    /**
     * 
     * @type {RootServerBaseStatisticsMeetings}
     * @memberof RootServerBaseStatistics
     */
    meetings: RootServerBaseStatisticsMeetings;
}

/**
 * Check if a given object implements the RootServerBaseStatistics interface.
 */
export function instanceOfRootServerBaseStatistics(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "serviceBodies" in value;
    isInstance = isInstance && "meetings" in value;

    return isInstance;
}

export function RootServerBaseStatisticsFromJSON(json: any): RootServerBaseStatistics {
    return RootServerBaseStatisticsFromJSONTyped(json, false);
}

export function RootServerBaseStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RootServerBaseStatistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'serviceBodies': RootServerBaseStatisticsServiceBodiesFromJSON(json['serviceBodies']),
        'meetings': RootServerBaseStatisticsMeetingsFromJSON(json['meetings']),
    };
}

export function RootServerBaseStatisticsToJSON(value?: RootServerBaseStatistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'serviceBodies': RootServerBaseStatisticsServiceBodiesToJSON(value.serviceBodies),
        'meetings': RootServerBaseStatisticsMeetingsToJSON(value.meetings),
    };
}

